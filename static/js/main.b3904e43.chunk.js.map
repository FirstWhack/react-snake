{"version":3,"sources":["game/Game.ts","game/Snake.tsx","index.tsx"],"names":["DifficultyMultiplier","CONSTANTS","gridSize","tileSizeMultiplier","this","initialGameState","playerPosition","x","y","applePosition","Math","floor","random","tileSize","trail","tailSize","handleKeyDown","setVelocity","keyCode","Snake","canvasRef","React","setVelocitySetter","current","canvas","ctx","getContext","game","difficulty","fps","onUpdate","newGameState","velocity","newVelocity","frameInterval","then","Date","now","mutableGameState","animate","requestAnimationFrame","elapsed","fillStyle","fillRect","width","height","px","py","ax","ay","newPlayerPosition","newTailSize","i","length","isOnApple","JSON","stringify","concat","slice","startGame","MEDIUM","className","onKeyDown","bind","tabIndex","ref","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.b3904e43.chunk.js","sourcesContent":["export const CONSTANTS = {\r\n  gridSize: 20,\r\n  tileSizeMultiplier: 0.9,\r\n  get tileSize() {\r\n    return this.gridSize * this.tileSizeMultiplier;\r\n  }\r\n};\r\n\r\nexport interface Velocity {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface GameState {\r\n  playerPosition: { x: number; y: number };\r\n  applePosition: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n  trail: { x: number; y: number }[];\r\n  tailSize: number;\r\n}\r\n\r\nexport const initialGameState = {\r\n  playerPosition: { x: CONSTANTS.gridSize / 2, y: CONSTANTS.gridSize / 2 },\r\n  applePosition: {\r\n    x: Math.floor(Math.random() * CONSTANTS.tileSize),\r\n    y: Math.floor(Math.random() * CONSTANTS.tileSize)\r\n  },\r\n  trail: [{ x: 10, y: 10 }],\r\n  tailSize: 5\r\n};\r\n\r\nexport enum DifficultyMultiplier {\r\n  EASY = 0.95,\r\n  MEDIUM = 0.9,\r\n  HARD = 0.8\r\n}\r\n\r\nconst START_FPS = 6;\r\n\r\nexport const startGame = (\r\n  difficulty: DifficultyMultiplier,\r\n  fps: number,\r\n  canvas: HTMLCanvasElement,\r\n  ctx: CanvasRenderingContext2D,\r\n  onUpdate = (newGameState: GameState) => {}\r\n) => {\r\n  let velocity = {\r\n    x: 0,\r\n    y: 0\r\n  };\r\n  const setVelocity = (newVelocity: Velocity) => {\r\n    velocity = newVelocity;\r\n  };\r\n  // start with 5 fps\r\n  let frameInterval = 1000 / START_FPS;\r\n  let then = Date.now();\r\n  // to be used by the render loop\r\n  let mutableGameState = { ...initialGameState };\r\n\r\n  const animate = (\r\n    canvas: HTMLCanvasElement,\r\n    ctx: CanvasRenderingContext2D,\r\n    onUpdate: (newState: GameState) => void\r\n  ) => {\r\n    // render loop control\r\n    requestAnimationFrame(() => animate(canvas, ctx, onUpdate));\r\n    const now = Date.now();\r\n    const elapsed = now - then;\r\n    if (elapsed > frameInterval) {\r\n      then = now - (elapsed % frameInterval);\r\n\r\n      // animation\r\n      ctx.fillStyle = \"black\";\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      const {\r\n        playerPosition: { x: px, y: py },\r\n        trail,\r\n        applePosition: { x: ax, y: ay },\r\n        tailSize\r\n      } = mutableGameState;\r\n\r\n      const newPlayerPosition = {\r\n        x: px + velocity.x,\r\n        y: py + velocity.y\r\n      };\r\n\r\n      if (newPlayerPosition.x < 0) {\r\n        newPlayerPosition.x = CONSTANTS.gridSize - 1;\r\n      }\r\n      if (newPlayerPosition.x > CONSTANTS.gridSize - 1) {\r\n        newPlayerPosition.x = 0;\r\n      }\r\n      if (newPlayerPosition.y < 0) {\r\n        newPlayerPosition.y = CONSTANTS.gridSize - 1;\r\n      }\r\n      if (newPlayerPosition.y > CONSTANTS.gridSize - 1) {\r\n        newPlayerPosition.y = 0;\r\n      }\r\n\r\n      ctx.fillStyle = \"lime\";\r\n      let newTailSize = tailSize;\r\n      for (var i = 0; i < trail.length; i++) {\r\n        ctx.fillRect(\r\n          trail[i].x * CONSTANTS.gridSize,\r\n          trail[i].y * CONSTANTS.gridSize,\r\n          CONSTANTS.tileSize,\r\n          CONSTANTS.tileSize\r\n        );\r\n        if (\r\n          trail[i].x === newPlayerPosition.x &&\r\n          trail[i].y === newPlayerPosition.y\r\n        ) {\r\n          newTailSize = 5;\r\n          frameInterval = 1000 / START_FPS;\r\n        }\r\n      }\r\n\r\n      const isOnApple =\r\n        ax === newPlayerPosition.x && ay === newPlayerPosition.y;\r\n      if (isOnApple) {\r\n        // grow tail\r\n        newTailSize++;\r\n        // speed up\r\n        frameInterval *= difficulty;\r\n      }\r\n\r\n      const newGameState = {\r\n        playerPosition: newPlayerPosition,\r\n        trail:\r\n          JSON.stringify(trail[trail.length - 1]) !==\r\n          JSON.stringify(newPlayerPosition)\r\n            ? (trail\r\n                .concat(newPlayerPosition)\r\n                .slice(-newTailSize) as GameState[\"trail\"])\r\n            : trail,\r\n        applePosition: isOnApple\r\n          ? {\r\n              x: Math.floor(Math.random() * CONSTANTS.gridSize),\r\n              y: Math.floor(Math.random() * CONSTANTS.gridSize)\r\n            }\r\n          : { x: ax, y: ay },\r\n        tailSize: newTailSize\r\n      };\r\n\r\n      ctx.fillStyle = \"red\";\r\n      ctx.fillRect(\r\n        ax * CONSTANTS.gridSize,\r\n        ay * CONSTANTS.gridSize,\r\n        CONSTANTS.tileSize,\r\n        CONSTANTS.tileSize\r\n      );\r\n\r\n      if (JSON.stringify(mutableGameState) !== JSON.stringify(newGameState)) {\r\n        mutableGameState = newGameState;\r\n        onUpdate(newGameState);\r\n      }\r\n    }\r\n  };\r\n  animate(canvas, ctx, onUpdate);\r\n  // return setVelocity method\r\n  return {\r\n    setVelocity\r\n  };\r\n};\r\n","import * as React from \"react\";\nimport {\n  CONSTANTS,\n  Velocity,\n  initialGameState,\n  startGame,\n  DifficultyMultiplier\n} from \"./Game\";\n\nconst handleKeyDown = (\n  setVelocity: (velocity: Velocity) => void,\n  { keyCode }: React.KeyboardEvent<HTMLDivElement>\n) => {\n  debugger;\n  switch (keyCode) {\n    case 37:\n      setVelocity({ x: -1, y: 0 });\n      break;\n    case 38:\n      setVelocity({ x: 0, y: -1 });\n      break;\n    case 39:\n      setVelocity({ x: 1, y: 0 });\n      break;\n    case 40:\n      setVelocity({ x: 0, y: 1 });\n      break;\n  }\n};\n\nexport default function Snake() {\n  const canvasRef = React.useRef<HTMLCanvasElement | null>(null);\n  // not really stateful but state is convenient to perform an update once we have this\n  const [setVelocity, setVelocitySetter] = React.useState<\n    ReturnType<typeof startGame>[\"setVelocity\"]\n  >(() => () => {});\n\n  React.useLayoutEffect(() => {\n    if (canvasRef.current) {\n      const { current: canvas } = canvasRef;\n      const ctx = canvasRef.current.getContext(\"2d\");\n      if (ctx) {\n        const game = startGame(DifficultyMultiplier.MEDIUM, 5, canvas, ctx);\n        setVelocitySetter(() => game.setVelocity);\n      }\n    }\n  }, []);\n\n  return (\n    <div\n      className=\"snake\"\n      onKeyDown={handleKeyDown.bind(null, setVelocity)}\n      tabIndex={1}\n    >\n      <canvas\n        ref={canvasRef}\n        width={CONSTANTS.gridSize * 20}\n        height={CONSTANTS.gridSize * 20}\n      />\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\n\nimport Snake from \"./game/Snake\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<Snake />, rootElement);\n"],"sourceRoot":""}